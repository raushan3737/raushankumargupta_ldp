Basic setUp:
git config --global user.name "John Doe"
git config --global user.email "johndoe@example.com
git config --list : To show all the credential-details
git --version

Basic Commands:
ls // To show all files in working  directory
ls -a // TO show all file & directory
ls -R // To show all files & directory in details . 
git ls-files // To show all files in Staging area
git log // To show all commit in git local repo. 
git init  // To inialise empty git repo 
touch filename // To make a new filename file 
git status // Will show the status like tracked file or untracked file any changes
git log // Show all commit history
git log branchName // Show all commit history of the branchName
git log -n 5 // Show last 5 commit
git log --oneline // Show the commit history with id & branch only 
git log --oneline --graph // Show the commit history with id & branch in graph form 
echo Content > filename // To write Overwrite Content in filename it will erase previous Content if any
ehco Content >> filename // To append Content 

Commits &  Basic Staging:

git add filename // To add filename in Staging area 
git add -A // To add all filename in Staging area
git diff // Show diff b/w all files 
git diff arg1 arg2 //  Show diff b/w arguement
git diff --staged filename // Diff b/w staged filename & working directory filename
git restore --staged filename // To unstage the change
git commit -m "message" // To commit with specified message
git commit -a -m "message" // To commit with specified message which is already in Staging area

Restoring files: 
git restore --staged file // To restore the deleted file in Staging area 

Removing files: 

rm file // To remove file from working directory
git rm file // To remove file from Staging area & working directory
$ git rm --cached -r . -> To remove all files from staging area only it will not affect the working directory 

git rm --cached filename // To remove filename from Staging
git rm -f file // To delete file from Staging & working directory



Basic Branching: 
git branch // To show all branches
git branch branchName // To make new branch with branchName
git switch branchName or git checkout branchName // To switch to the branchName
git diff <branchA> <branchB> // To diff b/w branchA & branchB
git checkout -b branchName // Making new branch & switch to it 
 
Merging:
git merge branchName // To merge branchName with present branch where you are in 
git merge <branchA> <branchB> // To merge with branchA & branchB

Rebasing: 
git rebase main  // To rebase the main with the feature branch
git merge feature // Merging the feature in the main 


diff : 
    destination       source 
(working directory -> Staging area -> Git local repo -> Remote )
git diff file // diff of file content b/w working directory & Staging area
git diff HEAD file // diff of file content b/w working directory & git local repo
git diff --staged HEAD file // diff of file content b/w  Staging area & last commit(Git local repo) of the file
git diff commitId file // diff of file content b/w specific commit & working directory .
git diff --staged id // diff of file content b/w specific commit & Staging area
git diff commitId1 commitId2 // Diff of content b/w commitId1 & commitId2
git diff branchA branchB // Diff of content b/w branchA & branchB





Reverting : 
git revert <commitId> // To revert the specified commitId  
git revert //  on the newest commit, to remove the changes the last commit added
git revert -e commitId // To edit commit msg before reverting the commit 

git checkout -- filename // To undo the Content of working directory as Staging area Content of the filename

Reset (Mode: --mixed --soft --hard ) : 
git reset filename // Remove file from Staging area it won't affect the working directory
git reset --mixed commitId // To discard/undo/restore  changes from git local repo(commit history) & Staging area for that commitId
git reset --soft commitId //To discard/undo/restore changes from git local repo only. It will not affect the Staging area & working directory . 
git reset --hard commitId // To discard/undo/restore changes from everywhere.  No way to revert 

git reset mode HEAD~1 // It will move head one step back . To discard last commit


Git clean : git clean is a convenience method for deleting untracked files in a repo's working directory. Untracked files are those that are in the repo's directory but have not yet been added to the repo's index with git add .
This could include removing temporary build artifacts or merge conflict files. We cover many of the options and scenarios in which you might used the clean command in Cleaning your Working Directory.
Limitation : Git clean works fine with untracked files, but it has its limitations. Not all files can be removed using this command. For instance, you can’t remove recently created directories, files linked to an existing commit, historically tracked files, or files already added to the index. Besides, when using the git clean command, you must use the “-force” option. Otherwise, you will get an error message, and the command won’t work.

Removing Untracked Files Using git clean Command:
git clean -f // To remove all untracked files
git clean -dn //  Removing Untracked Directory
git clean -dfx //Removing Untracked Ignored Files


Reordering history
git reflog // Git keeps track of updates to the tip of branches using a mechanism called reference logs, or "reflogs."
git rebase -i <after-this-commit>
git log --oneline --graph
git reflog

$ git reflog
69c880b (HEAD -> master) HEAD@{0}: commit: file7
18d7dd4 HEAD@{1}: commit: file6
3d144e3 HEAD@{2}: commit: file2
657df6d HEAD@{3}: commit: file5
8396b9d HEAD@{4}: commit: file4
98fd8a0 HEAD@{5}: commit: file3
8051120 HEAD@{6}: commit: file8
7043752 HEAD@{7}: commit: file9
5ac8ab2 HEAD@{8}: commit: file1
528bc25 (tag: START, origin/master) HEAD@{9}: commit (initial): Initial commit

git rebase -i <after-this-commit> // To reorder history from this commit to the last commit 
$ git rebase -i 7043752 // Id it will pick commit history from HEAD@{0} to 7043752 HEAD@{7} inclusive & we can reorder the commit history by arranging the content of vim editor 

pick 8051120 file8
pick 98fd8a0 file3
pick 8396b9d file4
pick 657df6d file5
pick 3d144e3 file2
pick 18d7dd4 file6
pick 69c880b file7

to 


pick 8051120 file8
pick 69c880b file7
pick 18d7dd4 file6
pick 657df6d file5
pick 8396b9d file4
pick 98fd8a0 file3
pick 3d144e3 file2


After succesful output :
$ git log --oneline
c12628f (HEAD -> master) file2
2b617af file3
cfb0ab9 file4
4be80cf file5
47abf0c file6
cecfdc3 file7
8051120 file8
7043752 file9
5ac8ab2 file1
528bc25 (tag: START, origin/master) Initial commit

 
Successfully rebased and updated refs/heads/master.




Squashing : Combining multiple commit in to one
git branch -a // To show all branches 
git branch branchNameofRemote // It will make a copy of that in local if if it is not in working directory & also tracking will on automatically.
git rebase -i HEAD~N // To squash last n commits you can view the commit history by git reflog 
git rebase -i commitId // To squash multiple commit  in the branch 
git merge --squash branchName // It will combine all the commit of branchName in to One commit & merge them in another branch where you  are  


Stash's meaning is "store something safely in a hidden place.
saves your data safely without committing. Stashing takes the messy state of your working directory, and temporarily save it for further use.
Squashing : The git stash command takes your uncommitted changes (both staged and unstaged), saves them away for later use, and then reverts them from your working copy
Suppose we are working on the feature but if we want to go back to the last commit without loosing the work of feature branch & also we dont want to make

stash - Used to store (changes) safely in a hidden place

git stash // To goback in the last commit and It save the local changes which are not the part of staging area in draft to do it we dont have to commit. 
git stash apply // To restore/goback to the draft content 


If we run  $ git stash //  and there is no changes in working directory other than the content till committed part it will show: 
which No local changes to save




Submodule : We Submodule two git repo .
A git submodule is a record within a host git repository that points to a specific commit in another external repository
A Git submodule is a git tool that allows a user to essentially add a Git repository as a subdirectory of another Git repository.
The subdirectory repository will have its own Git system, which means it will have its own commits history, independent from your 
main repository. This allows you to be able to set your subdirectory to refer to a specific commit you may want to work with.

Here’s an example. Suppose you’re developing a website and creating Atom feeds. Instead of writing your own Atom-generating code,
you decide to use a library. You’re likely to have to either include this code from a shared library like a CPAN install or Ruby gem, 
or copy the source code into your own project tree. The issue with including the library is that it’s difficult to customize the library 
in any way and often more difficult to deploy it, because you need to make sure every client has that library available. The issue with 
copying the code into your own project is that any custom changes you make are difficult to merge when upstream changes become available.
file structure will be : surface/submarines


How to use them: 
How do you use a Git submodule? First, let’s create one under a repository called House. Let’s say we want to add a submodule called Room under the House repository.
To do so, you would use the command git submodule add  with the absolute or relative URL of the project you want to add as a submodule. 
In this case:
git submodule add https://github.com/<user>/Room.git lib/Room

Let’s break it down:

git submodule add  – the syntax to add a Git submodule
https://github.com/<user>/Room.git  – the repository that is going to be added as a submodule
lib/Room  – the path where the submodule repository will be added to in the House repository (optional).
If a path is not provided, the submodule will default to the same name as its repository.

command: git submodule add ./submarines 

Raushan Kumar Gupta@DESKTOP-R24SDCR MINGW64 ~/Desktop/zemoso/Task/raushankumargupta_ldp/surface (master)
$ git submodule add ./submarines
Adding existing repo at 'submarines' to the index


git status will show .gitmodules file it show that submarines is link to the surface

Raushan Kumar Gupta@DESKTOP-R24SDCR MINGW64 ~/Desktop/zemoso/Task/raushankumargupta_ldp/surface (master)
$ git status
On branch master
Changes to be committed:
  (use "git restore --staged <file>..." to unstage)
        new file:   .gitmodules
        new file:   submarines


Why do we use submodules?
Now that we’ve created a Git submodule, let’s answer the question: Why? Why do we use Git submodules in the first place? 
In most cases, Git submodules are used when your project becomes more complex, and while your project depends on the main Git repository, 
you might want to keep their change history separate.

Using the above as an example, the Room repository depends on the House repository, but they operate separately. By using the Room  as a submodule, 
I can do whatever I want to my Room without having it affect my House.

Let’s translate the above scenario to something that might happen in development. Let’s say I want to include a library’s source code in my project,
but I don’t want to use it as is. Maybe I want to customize it, but customizing the library’s code can lead to difficult issues, such as having to integrate
the pulled changes from the library. For example, If I copied the library’s codebase into my project, I won’t be able to easily integrate new changes from the library’s 
codebase updates. In this case, I would use a Git submodule—I can have my project depend on the library, but whatever I do on my project is separate from the library.

As we come to the end of this post, there are a few things that you should keep in mind when using Git submodules:

If you have collaborators that work with the submodule, make sure everyone downloads and updates the contents to ensure they have the latest and greatest.
This is especially important if one person makes any changes to the submodule’s repository, as the updates are not seen by the collaborators.
Changes in submodules are not tracked by the main repository. This requires you to change into the directory where the changes were made.




Git supports two types of tags: lightweight and annotated. A lightweight tag is very much like a branch that doesn't change — it's just a pointer to a specific commit. 
Annotated tags, however, are stored as full objects in the Git database.

To make a tag:
 
git tag <tagname> -> Example git tag v1.4 
git tag -a v1.4 -m "my version 1.4" -> Annotated tags are stored as full objects in the Git database. To reiterate, They store extra meta data such as: the tagger name, email, and date. Similar to commits and commit messages Annotated tags have a tagging message
git tag v1.4-lw -> Making light weight tag
git tag -> To list stored tags in a repo execute

To refine the list of tags the -l option can be passed with a wild card expression:
$ git tag -l *-rc*
    v0.10.0-rc1
    v0.11.0-rc1
    v0.12.0-rc1
    v0.13.0-rc1
    v0.13.0-rc2
    v0.14.0-rc1
    v0.9.0-rc1
    v15.0.0-rc.1
    v15.0.0-rc.2

This previous example uses the -l option and a wildcard expression of -rc which returns a list of all tags marked with a -rc prefix, traditionally used to identify release candidates.


Submodules : 
Clone git repo that has submodules: git clone <git-repo-link> , git submodule init , git submodule update 
git submodule update // To go to the previous version of that submodule  
git submodule update --init // It will update the submodule as remote
git rm submoduleName , rm -rf .git/modules/submoduleName , edit config file -> -> To Remove submodule from repo
git submodule init -f submoduleName , rm -rf .git/modules/submoduleName , rm -rf .gitmodules , git rm -f submoduleName -> To Remove submodule from repo

tree.com //f -> To view all folder & files as tree form 
tree.com //a -> To view all folder  as tree form 

For instance, let’s say, if I want to search the string “human-readable” into my project,
I can do it using the git grep command like so.
$ git grep -n "human-readable" 


Now, this is fine but you can improve the output further by using few more options like --heading and --break like so.

$ git grep -n --heading --break "human-readable"

What Is Git Rebase?
Rebase is one of two Git utilities designed to integrate changes from one branch onto another. Rebasing is the process of combining or moving a sequence of commits on top of a new base commit. Git rebase is the linear process of merging.

What Does Git Rebase Do?
A Git rebase changes the base of the developer’s branch from one commit to another, so it looks like they have created their branch from a different commit. Internally, Git creates a new commit and applies it to the specified base. However, it's essential for everyone involved to understand that although the branch appears the same, it's made up of entirely new commits. When you perform a Git rebase, you are, in effect, rewriting history.